from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging

from app.configs.database import init_db
from app.routes.clients.client_routes import router as client_router
from app.routes.clients.session_routes import router as session_router
from app.routes.clients.otp_routes import router as otp_router

# Configuration du logger
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# Lifespan pour une meilleure gestion des √©v√©nements
@asynccontextmanager
async def lifespan(app: FastAPI):
    
    try:
        logger.info("üîÑ Initialisation de la base de donn√©es...")
        init_db()
        logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation de la base de donn√©es: {e}")
    yield  # D'autres actions peuvent √™tre ajout√©es ici

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title="ANGARA-AUTHENTIC API",
    description="Une API pour g√©n√©rer des documents certifi√©s",
    version="1.0",
    contact={
        "name": "Support ANGARA-AUTHENTIC",
        "email": "norepleysjm@gmail.com"
    },
    lifespan=lifespan  # Gestion optimis√©e des √©v√©nements de d√©marrage
)

# Configuration CORS (üîí S√©curisation en ajoutant des domaines sp√©cifiques)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Inclusion des routes
app.include_router(client_router)
app.include_router(session_router)
app.include_router(otp_router)

# Endpoint racine
@app.get("/", tags=["Root"])
def root():
    return {"message": "Bienvenue sur l'API de gestion des clients et des sessions"}
